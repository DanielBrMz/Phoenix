import Head from "next/head";
import { useEffect, useState } from "react";
import mapboxgl from "mapbox-gl";
import "mapbox-gl/dist/mapbox-gl.css";
import addCustomLayers from "~/utils/mapUtils/addCustomLayers";
import addCustomSources from "~/utils/mapUtils/addCustomSources";
import Timeslider from "~/Components/TimeSlider";
import NavBar from "~/Components/NavBar";
import ServicesLayer from "~/Components/Layers/ServicesLayer";
import Image from "next/image";
import PhoenixEyeLogo from "~/assets/phoenixeyelogo.png";
import StartPage from "./StartPage";

const CENTER_COORDS: [number, number] = [-110.8968082457804, 31.25933620026809];
const MAPBOX_ACCESS_TOKEN =
  "pk.eyJ1IjoiaGVjdG9yZ3R6MjciLCJhIjoiY2xuZ3dmc215MDc2ZDJqbWFydmszaTVxZCJ9.VjBUl1K3sWQTxY5pce434A";
const INITIAL_ZOOM = 15;
const INITIAL_PITCH = 60;

export default function Home() {
  const [kilometersPerPixel, setKilometersPerPixel] = useState(0);
  const [map, setMap] = useState<mapboxgl.Map | null>(null);
  const [userLogin, setIsUserLogin] = useState(false);

  useEffect(() => {
    if (userLogin) {
      mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;

      const mapInstance = new mapboxgl.Map({
        container: "map",
        projection: { name: "globe" },
        style: "mapbox://styles/mapbox/satellite-streets-v12",
        center: CENTER_COORDS,
        zoom: INITIAL_ZOOM,
      });

      setMap(mapInstance);

      mapInstance.addControl(new mapboxgl.NavigationControl());
      mapInstance.addControl(new mapboxgl.FullscreenControl());

      mapInstance.on("style.load", () => {
        addCustomSources(mapInstance);
        addCustomLayers(mapInstance);

        mapInstance.setFog({
          color: "rgb(186, 210, 235)",
          "high-color": "rgb(36, 92, 223)",
          "horizon-blend": 0.02,
          "space-color": "rgb(11, 11, 25)",
          "star-intensity": 0.6,
        });

        mapInstance.setTerrain({ source: "mapbox-dem", exaggeration: 1.4 });
        mapInstance.setPitch(INITIAL_PITCH);

        mapInstance.on("zoom", () => {
          setKilometersPerPixel(
            (4007501.6686 *
              Math.abs(
                Math.cos((mapInstance.getCenter().lat * Math.PI) / 180),
              )) /
              Math.pow(2, mapInstance.getZoom() + 8),
          );
        });

        return () => {
          mapInstance.remove();
        };
      });
    }
  }, [userLogin]);

  const handleLogin = () => {
    setIsUserLogin(true);
  };

  return (
    <>
      <Head>
        <title>Phoenix Eye | Wildfire Prediction</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href={PhoenixEyeLogo.src} />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="anonymous"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap"
          rel="stylesheet"
        />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="anonymous"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Anek+Gujarati:wght@100..800&display=swap"
          rel="stylesheet"
        />
      </Head>
      {!userLogin ? (
        <StartPage onLogin={handleLogin} />
      ) : (
        <main className="flex min-h-screen flex-col items-center justify-center bg-[#789]">
          <div id="map" style={{ width: "100%", height: "100vh" }}></div>
          <NavBar map={map} />
          {map && <Timeslider map={map} scale={kilometersPerPixel} />}
          {map && <ServicesLayer map={map} />}
          <Image
            src={PhoenixEyeLogo}
            alt="Logo"
            width={100}
            height={100}
            className="z-1 absolute bottom-4 left-8"
          />
        </main>
      )}
    </>
  );
}
